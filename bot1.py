from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo

API_TOKEN = '7482863441:AAHcTxp7DZSCZ5bodD5-hQ2uhPXXJqFxUNg'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if message.chat.type != 'private':
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.first_name}")

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Murzik Kombat üêà‚Äç‚¨õ. –ñ–º–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å" —Å WebApp
    web_app_info = WebAppInfo(url="https://murzik-combat.netlify.app")
    keyboard_button = InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å", web_app=web_app_info)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[[keyboard_button]])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer(message_text, reply_markup=reply_markup)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start")


@dp.message(Command("murzik"))
async def send_meow(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /murzik –æ—Ç {message.from_user.first_name}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    voice_path = "Meow1.ogg"
    with open(voice_path, 'rb') as voice_file:
        voice = BufferedInputFile(voice_file.read(), filename="Meow1.ogg")
        await message.answer_voice(voice)

    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /murzik")

@dp.message(Command("skazka"))
async def send_skazka(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /skazka –æ—Ç {message.from_user.first_name}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    voice_path = "skazka.ogg"
    with open(voice_path, 'rb') as voice_file:
        voice = BufferedInputFile(voice_file.read(), filename="skazka.ogg")
        await message.answer_voice(voice)

    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /skazka")

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    dp.run_polling(bot)
